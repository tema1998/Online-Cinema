services:
  auth_service:
    build:
      context: .
      dockerfile: auth_service/src/Dockerfile
    env_file:
      - .env
    ports:
      - "8081:8081" #TODO to delete on prod
    depends_on:
      db_auth:
        condition: service_healthy
      redis:
        condition: service_healthy

  content_service:
    build:
      context: .
      dockerfile: content_service/src/Dockerfile
    env_file:
      - .env
    depends_on:
      db_content:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./content_service/src:/srv/app
    ports:
      - "8080:8080" #TODO to delete on prod

  billing_service:
    build:
      context: .
      dockerfile: billing_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8082:8082" #TODO to delete on prod
    depends_on:
      db_billing:
        condition: service_healthy

  rabbitmq_billing:
    image: rabbitmq:3-management  # Includes the management plugin for monitoring
    container_name: rabbitmq_billing
    ports:
      - "5673:${RABBITMQ_NOTIFICATION_CONNECTION_PORT}" # Port for RabbitMQ
      - "15673:${RABBITMQ_NOTIFICATION_MANAGEMENT_PORT}" # Port for the RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_BILLING_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_BILLING_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 10s
      retries: 5
    volumes:
      - rabbitmq_billing_data:/var/lib/rabbitmq

  rabbitmq_billing_init:
    build:
      context: .
      dockerfile: ./billing_rabbitmq_init/infra/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq_billing:
        condition: service_healthy

  billing_worker:
    build:
      context: .
      dockerfile: ./billing_worker/infra/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq_billing:
        condition: service_healthy

  admin_service:
    build:
      context: .
      dockerfile: admin_service/Dockerfile
    container_name: admin_service
    depends_on:
      db_content:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - admin_static_volume:/app/static
      - admin_media_volume:/app/media
    command: >
      bash -c "python3 manage.py migrate && gunicorn -b 0.0.0.0:8000 config.wsgi:application"
    ports:
      - "8000:8000" #TODO to delete on prod


  db_auth:
    image: postgres:15
    container_name: db_auth
    environment:
      POSTGRES_DB: ${AUTH_DB}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - db_auth:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5433:5432" #TODO to delete on prod

  db_content:
    image: postgres:15
    container_name: db_content
    environment:
      POSTGRES_DB: ${CONTENT_DB}
      POSTGRES_USER: ${CONTENT_DB_USER}
      POSTGRES_PASSWORD: ${CONTENT_DB_PASSWORD}
    volumes:
      - ./content_service/etl/dump.sql:/docker-entrypoint-initdb.d/dump.sql
      - db_content:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5435:5432" #TODO to delete on prod

  db_billing:
    image: postgres:15
    container_name: db_billing
    environment:
      POSTGRES_DB: ${BILLING_DB}
      POSTGRES_USER: ${BILLING_DB_USER}
      POSTGRES_PASSWORD: ${BILLING_DB_PASSWORD}
    volumes:
      - db_billing:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - "5434:5432" #TODO to delete on prod

  db_notification:
    image: postgres:13
    container_name: db_notification
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB}
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    ports:
      - "5436:5432" #TODO to delete on prod
    volumes:
      - db_notification_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER} -d ${NOTIFICATION_DB}" ]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: always

  redis:
    image: redis:5.0.7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379" #TODO to delete on prod
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  rabbitmq_notification:
    image: rabbitmq:3-management  # Includes the management plugin for monitoring
    container_name: rabbitmq_notification
    ports:
      - "${RABBITMQ_NOTIFICATION_CONNECTION_PORT}:${RABBITMQ_NOTIFICATION_CONNECTION_PORT}" # Port for RabbitMQ
      - "${RABBITMQ_NOTIFICATION_MANAGEMENT_PORT}:${RABBITMQ_NOTIFICATION_MANAGEMENT_PORT}" # Port for the RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_NOTIFICATION_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_NOTIFICATION_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 10s
      retries: 5
    volumes:
      - rabbitmq_notification_data:/var/lib/rabbitmq

  notification_service:
    build:
      context: .
      dockerfile: notification_service/infra/Dockerfile
    ports:
      - "8083:8080" #TODO to delete on prod
    env_file:
      - .env
    volumes:
      - ./notification_service:/notification_service
    depends_on:
      rabbitmq_notification:
        condition: service_healthy

  notification_consumer_service:
    build:
      context: .
      dockerfile: consumer_messages/infra/Dockerfile
    depends_on:
      rabbitmq_notification:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./consumer_messages:/consumer_messages

  notification_consumer_recorder_service:
    build:
      context: .
      dockerfile: notification_consumer_recorder_service/infra/Dockerfile
    depends_on:
      rabbitmq_notification:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./notification_consumer_recorder_service:/notification_consumer_recorder_service


  elasticsearch:
    image: elasticsearch:8.16.1
    container_name: elasticsearch
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 20s
      timeout: 10s
      retries: 10
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    ports:
      - "9200:9200" #TODO to delete on prod
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    volumes:
      - elastic_volume:/usr/share/elasticsearch/data

  content_etl:
    build:
      context: ./content_service/etl
    env_file:
      - .env
    depends_on:
      db_content:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    container_name: content_etl
    restart: on-failure

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - auth_service
      - admin_service
      - content_service
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - ./nginx/logs:/var/log/nginx
      - admin_static_volume:/app/static
      - admin_media_volume:/app/media
    restart: always

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    depends_on:
      - auth_service
    ports:
      - '6831:6831/udp' #TODO to delete on prod
      - "16686:16686"  #TODO to delete on prod

volumes:
  rabbitmq_notification_data:
  rabbitmq_billing_data:
  db_notification_data:
  db_billing:
  db_content:
  db_auth:
  elastic_volume:
  admin_static_volume:
  admin_media_volume: